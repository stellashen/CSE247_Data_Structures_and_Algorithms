Studio 3 write up

Your TA's name: Gwyneth Pearson



Students in your studio group:

    Name        Student ID (begins with a 4)
	
1. Yangchen Shen  439908
2. Benji Gu       435291
3. Huizhong Zhao	451331
4. Theron Howe		441812
5.
6.


Part A

What are three data types that can serve as T?
String, Integer, Double.

Which class did you pick to examine its compareTo method?
Byte.

How did its compareTo method impose a natural order on that class's instances?
Subtract one byte from another, and 
1) if it returns zero, then they are equal.
2) if it returns a positive number, then the first byte is larger.
3) if it returns a negative number, then the second byte is larger.

Part B

How does compareTo work?  Does it always return either -1, 0, or +1?
It returns a negative or positive number or zero. No, not always -1,0,1.

Part C

From your inspection of the LinkedList<T> class's source code:
Given a LinkedList<T> of size n, what is the asymptotic complexity, worst-case, 
for performing each of the following operations?

  1)  Appending to the end of that list  addLast(..)
  Θ(1).
  
  2)  Prepending to the beginning of that list   addFirst(...)
  Θ(1).
  
  3)  Inserting an element in the middle of the list  add(size/2, .....)
  Θ(n). 
  
And for your implementation of a PriorityQueue using the Unordered List, 
given n elements already in the queue, what is the asymptotic complexity, 
worst-case for performing each of the following operations?
  
  4)  extractMin
  Θ(n).
  
  5)  insert
  Θ(1).
  
  6)  isEmpty
  Θ(1).
  
Part D

From your implementation of OrderedArray, what is the asymptotic complexity, worst-case, for performing each of the following operations?

  1)  Adding an element at the end of the array
  Θ(n).
  
  2)  Inserting an element at the beginning of the array
  Θ(1).
  
  3)  Inserting an element in the middle of the list
  Θ(n).
  
And for your implementation of a PriorityQueue using the Ordered Array, 
given n elements already in the queue, what is the asymptotic complexity, 
worst-case for performing each of the following operations?
  
  4)  extractMin
  Θ(n).
  
  5)  insert
  Θ(n).
  
  6)  isEmpty
  Θ(1).
 
 Are there situations when you would want to use the OrderedArray or the UnorderedList instead of
 the binary heap described in class?   Explain please.
If you only need to insert/remove from the beginning/end of the list/array, 
it takes constant time O(1), while binary heap would take O(log(n)).
 